/* eslint-disable @typescript-eslint/no-explicit-any */
import { NextRequest, NextResponse } from "next/server";
import { validateEmail, validatePassword } from "@/lib/validators";
import { hashPassword } from "@/lib/crypto";
import { insertUser } from "@/lib/wkt3db";
import { sendVerificationEmail } from "@/lib/mailer";
import { v4 as uuidv4 } from "uuid";

/**
 * üìù Signup API
 * ‡§®‡§Ø‡§æ user register ‡§ï‡§∞‡•á‡§ó‡§æ
 * - Email + Password validate ‡§ï‡§∞‡•á‡§ó‡§æ
 * - Password ‡§ï‡•ã hash ‡§ï‡§∞‡•á‡§ó‡§æ
 * - User ‡§ï‡•ã DB ‡§Æ‡•á‡§Ç store ‡§ï‡§∞‡•á‡§ó‡§æ (verified = false initially)
 * - Verification email ‡§≠‡•á‡§ú‡•á‡§ó‡§æ
 */
export async function POST(req: NextRequest) {
  try {
    const body = await req.json();
    const { email, password, username } = body;

    // üõ°Ô∏è Input validation (Email)
    if (!validateEmail(email)) {
      return NextResponse.json({ success: false, message: "Invalid email" }, { status: 400 });
    }

    // üõ°Ô∏è Input validation (Password)
    if (!validatePassword(password)) {
      return NextResponse.json({ success: false, message: "Weak password" }, { status: 400 });
    }

    // üîë Password hash ‡§ï‡§∞‡§®‡§æ
    const hashedPassword = await hashPassword(password);

    // üÜî ‡§®‡§Ø‡§æ user object ‡§¨‡§®‡§æ‡§®‡§æ
    const newUser = {
      id: uuidv4(), // unique userId
      email,
      username: username || email.split("@")[0],
      passwordHash: hashedPassword,
      verified: false, // email verify ‡§π‡•ã‡§®‡§æ ‡§¨‡§æ‡§ï‡•Ä ‡§π‡•à
      balance: 10000, // default balance (cents)
      role: "player", // default role
      createdAt: new Date().toISOString(),
    };

    // üíæ DB ‡§Æ‡•á‡§Ç user insert ‡§ï‡§∞‡§®‡§æ
    await insertUser(newUser);

    // üìß Verification email ‡§≠‡•á‡§ú‡§®‡§æ
    await sendVerificationEmail(newUser.email, newUser.id);

    return NextResponse.json({
      success: true,
      message: "Signup successful, please verify your email.",
    });
  } catch (err: any) {
    return NextResponse.json(
      { success: false, message: "Error: " + err.message },
      { status: 500 }
    );
  }
}
