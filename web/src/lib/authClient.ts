// authClient.ts
// üëâ ‡§∏‡•á‡§∂‡§® ‡§ü‡•ã‡§ï‡§® verify, sign ‡§î‡§∞ revoke ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è helper
// ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä comments ‡§¶‡§ø‡§è ‡§ó‡§è ‡§π‡•à‡§Ç ‡§§‡§æ‡§ï‡§ø ‡§Ü‡§∏‡§æ‡§®‡•Ä ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§æ ‡§ú‡§æ ‡§∏‡§ï‡•á

import crypto from "crypto";
import { verifyHmac, signHmac } from "./crypto";
import { validateUUID } from "./validators";


export type UserRole =
  | "super-admin"
  | "admin"
  | "manager"
  | "employee"
  | "player";

export interface SessionTokenPayload {
  userId: string; // ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•Ä ‡§Ø‡•Ç‡§®‡§ø‡§ï ID
  role: UserRole; // ‡§∞‡•ã‡§≤ (player, admin ‡§Ü‡§¶‡§ø)
  exp: number; // expiry ‡§∏‡§Æ‡§Ø (epoch seconds)
  iat: number; // issued at
  jti: string; // token ID (revocation ‡§ï‡•á ‡§≤‡§ø‡§è)
}

// memory ‡§Æ‡•á‡§Ç revoked ‡§ü‡•ã‡§ï‡§® store ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è (dev mode)
const revokedJti = new Set<string>();

const SESSION_HMAC_SECRET =
  process.env.SESSION_HMAC_SECRET || "dev_secret_change_me";

export const authClient = {
  /**
   * Verify a session token:
   * - signature check
   * - expiry check
   * - role check (optional)
   * ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä: ‡§ü‡•ã‡§ï‡§® validate ‡§ï‡§∞‡•á‡§ó‡§æ ‡§î‡§∞ payload ‡§≤‡•å‡§ü‡§æ‡§è‡§ó‡§æ
   */
  async verifySessionToken(
    token: string,
    requiredRole?: UserRole
  ): Promise<SessionTokenPayload> {
    if (!token) throw new Error("Missing session token");

    let payload: SessionTokenPayload;
    try {
      payload = verifyHmac(token, SESSION_HMAC_SECRET) as SessionTokenPayload;
    } catch {
      throw new Error("Invalid session token signature");
    }

    // ‚úÖ validateUUID ‡§Ö‡§¨ void return ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, direct call
    try {
      validateUUID(payload.userId);
    } catch {
      throw new Error("Invalid user ID in token");
    }

    if (!payload.role) throw new Error("Missing role in token");

    const now = Math.floor(Date.now() / 1000);
    if (!payload.exp || payload.exp < now) throw new Error("Session expired");
    if (!payload.iat) throw new Error("Invalid issued-at timestamp");
    if (!payload.jti) throw new Error("Missing token ID");

    if (revokedJti.has(payload.jti)) throw new Error("Token revoked");

    if (requiredRole && payload.role !== requiredRole) {
      throw new Error("Insufficient role");
    }

    return payload;
  },

  /**
   * Revoke a session token by its jti.
   * ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä: revoke ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è jti memory ‡§Æ‡•á‡§Ç add ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ
   */
  async revokeToken(jti: string) {
    revokedJti.add(jti);
  },

  /**
   * Dev helper: ‡§®‡§Ø‡§æ token issue ‡§ï‡§∞‡§®‡§æ
   * ‡§π‡§ø‡§®‡•ç‡§¶‡•Ä: ‡§ï‡•á‡§µ‡§≤ dev/test mode ‡§ï‡•á ‡§≤‡§ø‡§è, production ‡§Æ‡•á‡§Ç auth service ‡§∏‡•á issue ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á
   */
  async _dev_issueToken(userId: string, role: UserRole, ttlSeconds = 3600) {
    try {
      validateUUID(userId); // validate userId before issuing
    } catch {
      throw new Error("Invalid userId");
    }

    const now = Math.floor(Date.now() / 1000);
    const payload: SessionTokenPayload = {
      userId,
      role,
      exp: now + ttlSeconds,
      iat: now,
      jti: crypto.randomUUID(),
    };
    return signHmac(payload, SESSION_HMAC_SECRET);
  },
};
